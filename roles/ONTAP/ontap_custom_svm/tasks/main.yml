---
# Create the aggr list variable for the Infra SVM
- name: Prints two lines of messages, but only if there is an environment value set
  ansible.builtin.debug:
    msg:
    - "{{ svm_specs}}"

- name: Create the aggregate list variable for Infra SVM
  ansible.builtin.set_fact:
    total_aggr_list: "{{ total_aggr_list | default([]) + [item.aggr_name] }}"
  with_items:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten | map(attribute='data_aggregates') | flatten }}"
  when: item.aggr_name is defined and item.aggr_name != None
  tags:
    - ontap_config_svm
    - ontap_ls_mirror_volumes
    - ontap_snapmirror_relationship


# See the aggr list
- name: See the aggregate list for Infra SVM
  ansible.builtin.debug: var=total_aggr_list
  tags:
    - ontap_config_svm
    - ontap_ls_mirror_volumes
    - ontap_snapmirror_relationship

# Create the infrastructure SVM with required protocols
- name: Create custom SVM with specified protocols enabled
  netapp.ontap.na_ontap_svm:
    state: "{{svm_specs.state}}"
    name: "{{item.svm_name}}"
    allowed_protocols: "{{item.allowed_protocols}}"
    aggr_list: "{{total_aggr_list}}"
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  with_items:
    - "{{svm_specs}}"
  tags:
    - ontap_config_svm

# Enable NFS protocol with vstorage enabled for VAAI plugin. Adding NFSv4.1 attribute as well
- name: Enable NFS protcol
  netapp.ontap.na_ontap_nfs:
    state: "{{svm_specs.state}}"
    vserver: "{{svm_specs.svm_name}}"
    vstorage_state: enabled
    service_state: started
    nfsv41: disabled
    nfsv4: disabled
    udp: disabled
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  when:
    - "('nfs' in svm_specs.allowed_protocols)"
  tags:
    - ontap_config_svm

# Getting total count of data aggregates created
- name: Get the total number of data aggregates created across all nodes in the ONTAP Cluster
  ansible.builtin.set_fact:
    total_aggr_count: "{{ total_aggr_list|length }}"
  tags:
    - ontap_ls_mirror_volumes
    - ontap_snapmirror_relationship

# Get the SVM root volume aggregate information
- name: Get the SVM root volume aggregate information
  netapp.ontap.na_ontap_rest_info:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
    use_rest: always
    use_python_keys: true
    gather_subset:
      - volume_info
    parameters:
      name: "*root"
      svm.name: "{{svm_specs.svm_name}}"
    fields:
      - aggregates
  register: rootvol_aggr
  tags:
    - ontap_ls_mirror_volumes
    - ontap_snapmirror_relationship

# Get the SVM root volume node information
- name: Get the SVM root volume node information
  netapp.ontap.na_ontap_rest_info:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
    use_rest: always
    use_python_keys: true
    gather_subset:
      - aggregate_info
    parameters:
      name: "{{ rootvol_aggr.ontap_info.storage_volumes.records[0].aggregates[0].name }}"
    fields:
      - node.name
  register: node_name
  tags:
    - ontap_ls_mirror_volumes
    - ontap_snapmirror_relationship

# Create the aggregate list with aggregates hosted on SVM root volume node
- name: Create the aggregate list with aggregates hosted on SVM root volume node
  ansible.builtin.set_fact:
    aggr_list: "{{ aggr_list | default([]) + [item.1.aggr_name] }}"
  with_subelements:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
    - data_aggregates
  when:
    - item.0.node_name == node_name.ontap_info.storage_aggregates.records[0].node.name
    - item.1.aggr_name is defined and item.1.aggr_name != None
  tags:
    - ontap_ls_mirror_volumes
    - ontap_snapmirror_relationship


# Set the password for vsadmin first. Account cannot be unlocked without password
- name: Set password for vsadmin user
  netapp.ontap.na_ontap_user:
    state: "{{svm_specs.state}}"
    vserver: "{{svm_specs.svm_name}}"
    applications: http,ontapi,ssh
    authentication_method: password
    role_name: vsadmin
    lock_user: yes
    name: vsadmin
    set_password: "{{svm_specs.vsadmin_password}}"
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  tags:
    - ontap_unlock_vsadmin

# Unlock vsadmin user
- name: Unlock vsadmin user
  netapp.ontap.na_ontap_user:
    state: "{{svm_specs.state}}"
    vserver: "{{svm_specs.svm_name}}"
    applications: http,ontapi,ssh
    authentication_method: password
    role_name: vsadmin
    lock_user: no
    name: vsadmin
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  tags:
    - ontap_unlock_vsadmin

# Create login banner for the Storage Virtual Machine
- name: Create login banner for the SVM
  netapp.ontap.na_ontap_login_messages:
    vserver: "{{item.svm_name}}"
    banner: "{{item.svm_login_banner}}"
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  with_items:
    - "{{svm_specs}}"
  tags:
    - ontap_svm_login_banner

# Remove insecure ciphers from the Storage Virtual Machine. Ciphers with the suffix CBC are considered insecure
- name: Remove insecure ciphers from the SVM
  netapp.ontap.na_ontap_rest_cli:
    command: 'security/ssh/remove'
    verb: 'DELETE'
    params: {'vserver': '{{svm_specs.svm_name}}'}
    body: {'ciphers': ['aes256-cbc','aes192-cbc','aes128-cbc','3des-cbc']}
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  tags:
    - ontap_svm_remove_insecure_ciphers


# Create LIFs for NFS access
- name: Create LIF(s) for NFS access
  netapp.ontap.na_ontap_interface:
    state: "{{svm_specs.state}}"
    vserver: "{{svm_specs.svm_name}}"
    service_policy: default-data-files
    home_node: "{{item.0.node_name}}"
    home_port: "{{item.2}}-{{svm_specs.nfs_vlan}}"
    address: "{{item.0.nfs_lifs.address}}"
    netmask: "{{item.0.nfs_lifs.netmask}}"
    interface_name: "{{item.0.nfs_lifs.name}}"
    admin_status: up
    failover_policy: broadcast-domain-wide
    is_auto_revert: true
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  with_nested:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
    - "{{storage_vlan_list}}"
    - "{{ifgrp_name}}"
  when:
    - "('nfs' in svm_specs.allowed_protocols)"
    - item.1.storage_protocol == "NFS"
  tags:
    - ontap_nfs_lifs

- name: Create LIF for SVM Management
  netapp.ontap.na_ontap_interface:
    state: "{{svm_specs.state}}"
    vserver: "{{svm_specs.svm_name}}"
    service_policy: default-management
    home_node: "{{svm_specs.svm_mgmt_lif.home_node}}"
    home_port: "{{ifgrp_name}}-{{svm_specs.mgmt_vlan}}"
    address: "{{svm_specs.svm_mgmt_lif.address}}"
    netmask: "{{svm_specs.svm_mgmt_lif.netmask}}"
    interface_name: "{{svm_specs.svm_mgmt_lif.lif_name}}"
    admin_status: up
    failover_policy: broadcast-domain-wide
    is_auto_revert: true
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false

# Create a new rule for the infrastructure NFS subnet in the default export policy
- name: Create the export policy rules
  netapp.ontap.na_ontap_export_policy_rule:
    state:  "{{svm_specs.state}}"
    vserver: "{{item.svm_name}}"
    policy_name: default
    client_match: "{{item.client_match}}"
    protocol: "{{item.data_protocol}}"
    ro_rule: sys
    rw_rule: sys
    rule_index: 1
    super_user_security: sys
    allow_suid: True
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  with_items:
    - "{{svm_specs}}"
  tags:
    - ontap_export_policy_rule


# Create a default route in infra SVM
- name: Create a default route in infra SVM
  netapp.ontap.na_ontap_net_routes:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    destination: "0.0.0.0/0"
    gateway: "{{item.gateway}}"
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  with_items:
    - "{{svm_specs.svm_mgmt_lif}}"
  tags:
    - ontap_svm_default_route

